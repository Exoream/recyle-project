// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	entity "recycle/features/user/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserDataInterface is an autogenerated mock type for the UserDataInterface type
type UserDataInterface struct {
	mock.Mock
}

// CheckLogin provides a mock function with given fields: email, password
func (_m *UserDataInterface) CheckLogin(email string, password string) (entity.Main, error) {
	ret := _m.Called(email, password)

	var r0 entity.Main
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (entity.Main, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) entity.Main); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(entity.Main)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: data
func (_m *UserDataInterface) Create(data entity.Main) (string, error) {
	ret := _m.Called(data)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Main) (string, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(entity.Main) string); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entity.Main) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: id
func (_m *UserDataInterface) DeleteById(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllUsers provides a mock function with given fields:
func (_m *UserDataInterface) FindAllUsers() ([]entity.Main, error) {
	ret := _m.Called()

	var r0 []entity.Main
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Main, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Main); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Main)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *UserDataInterface) GetById(id string) (entity.Main, error) {
	ret := _m.Called(id)

	var r0 entity.Main
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.Main, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) entity.Main); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entity.Main)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByVerificationToken provides a mock function with given fields: token
func (_m *UserDataInterface) GetByVerificationToken(token string) (entity.Main, error) {
	ret := _m.Called(token)

	var r0 entity.Main
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (entity.Main, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) entity.Main); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(entity.Main)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailByID provides a mock function with given fields: userID
func (_m *UserDataInterface) GetEmailByID(userID string) (string, error) {
	ret := _m.Called(userID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: id, updated
func (_m *UserDataInterface) UpdateById(id string, updated entity.Main) (entity.Main, error) {
	ret := _m.Called(id, updated)

	var r0 entity.Main
	var r1 error
	if rf, ok := ret.Get(0).(func(string, entity.Main) (entity.Main, error)); ok {
		return rf(id, updated)
	}
	if rf, ok := ret.Get(0).(func(string, entity.Main) entity.Main); ok {
		r0 = rf(id, updated)
	} else {
		r0 = ret.Get(0).(entity.Main)
	}

	if rf, ok := ret.Get(1).(func(string, entity.Main) error); ok {
		r1 = rf(id, updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIsVerified provides a mock function with given fields: userID, isVerified
func (_m *UserDataInterface) UpdateIsVerified(userID string, isVerified bool) error {
	ret := _m.Called(userID, isVerified)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(userID, isVerified)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserDataInterface creates a new instance of UserDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserDataInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserDataInterface {
	mock := &UserDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
